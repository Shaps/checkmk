#!/usr/bin/env bash
#
# Check_MK Bacula Plugin
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Check_MK for Bacula


INTERVAL="30h"
INSTALLED=0
PGSQL=0
CMD=0


#
# STATUS_FRESHNESS - Find clients with no backup within $INTERVAL
#
status_freshness()
{
    unset DETAIL

    # Find count(clientid) for clients which weren't backed up within $INTERVAL
    FRESHNESS_SQL="SELECT COUNT(clientid) FROM client WHERE clientid NOT IN
               (SELECT clientid FROM job WHERE endtime > (NOW() - INTERVAL '$INTERVAL')
               AND JOBSTATUS = 'T');"
    
    # Find the name of these clients.
    FRESHNESS_DETAIL_SQL="SELECT name FROM client WHERE clientid NOT IN 
               (SELECT clientid FROM job WHERE endtime > (NOW() - INTERVAL '$INTERVAL')
               AND JOBSTATUS = 'T');"

    count=`echo $FRESHNESS_SQL|$CMD`

    if [[ $count == "" ]]; then
        echo "freshness E 'Unable to read output from query'"
        return
    fi

    if [[ $count -ne 0 ]]; then
        DETAIL=`echo $FRESHNESS_DETAIL_SQL|$CMD|tr '\n' ','`
    fi

    echo "freshness $count $INTERVAL '$DETAIL'"
}



#
# STATUS_FULLBACKUPS - Find clients without a full backup.
#
status_fullbackups()
{
    unset DETAIL

    # Finds all clients which have no full backup.
    FULLBACKUPS_SQL="SELECT COUNT(clientid) FROM client WHERE clientid NOT IN 
        (SELECT client.clientid FROM client,job WHERE job.level = 'F' AND 
        (job.jobstatus='T' OR job.jobstatus='e') AND 
        job.clientid = client.clientid);"
    
    # Find the name of these clients.
    FULLBACKUPS_DETAIL_SQL="SELECT name FROM client WHERE clientid NOT IN 
        (SELECT client.clientid FROM client,job WHERE job.level = 'F' AND 
        (job.jobstatus='T' OR job.jobstatus='e') AND 
        job.clientid = client.clientid);"

    count=`echo $FULLBACKUPS_SQL|$CMD`

    if [[ $count == "" ]]; then
    echo "fullbackups E 'Unable to read output from query'"
    return
    fi

    if [[ $count -ne 0 ]]; then
        DETAIL=`echo $FULLBACKUPS_DETAIL_SQL|$CMD|tr '\n' ','`
    fi

    echo "fullbackups $count '$DETAIL'"
}




#
# STATUS_FULLBACKUPS_POOL - Find full backup media which is in the wrong pool.
#
status_fullbackups_pool()
{
    unset DETAIL

    # Find count(jobid) of all media which is used in Fullbackup jobs
    # which does not belong to the Fullbackup pool.
    FULLBACKUPS_POOL_SQL="SELECT count(DISTINCT j.jobid)
              FROM job j, jobmedia jm, media m, pool p
              WHERE j.jobid=jm.jobid 
                              AND jm.mediaid=m.mediaid
                              AND m.poolid=p.poolid
                              AND p.name NOT ilike '%full%'
                              AND j.level='F'
                              AND j.type='B'
                              AND j.jobstatus in ('T', 'e');"

    # Find the job names
    FULLBACKUPS_POOL_DETAIL_SQL="SELECT DISTINCT j.job
              FROM job j, jobmedia jm, media m, pool p
              WHERE j.jobid=jm.jobid 
                              AND jm.mediaid=m.mediaid
                              AND m.poolid=p.poolid
                              AND p.name NOT ilike '%full%'
                              AND j.level='F'
                              AND j.type='B'
                              AND j.jobstatus in ('T', 'e');"
    
    count=`echo $FULLBACKUPS_POOL_SQL|$CMD`

    if [[ $count == "" ]]; then
    echo "fullbackupspool E 'Unable to read output from query'"
    return
    fi

    if [[ $count -ne 0 ]] ; then
        DETAIL=`echo $FULLBACKUPS_POOL_DETAIL_SQL|$CMD|tr '\n' ','`
    fi

    echo "fullbackupspool $count '$DETAIL'"
}




#
# STATUS_ERROUNOS_VOLUMES - Detect Volumes with errors.
#
status_errounos_volumes()
{
    unset DETAIL

    ERRVOLS_SQL="SELECT COUNT(*)
                 FROM Media
                 WHERE (VolErrors>0) 
                     OR (VolStatus='Error')
                     OR (VolStatus='Disabled')"

    ERRVOLS_DETAIL_SQL="SELECT volumename
                 FROM Media
                 WHERE (VolErrors>0) 
                     OR (VolStatus='Error')
                     OR (VolStatus='Disabled')"

    count=`echo $ERRVOLS_SQL|$CMD`

    if [[ $count == "" ]]; then
    echo "errorvols E 'Unable to read output from query'"
    return
    fi

    if [[ $count -ne 0 ]] ; then
        DETAIL=`echo $ERRVOLS_DETAIL_SQL|$CMD|tr '\n' ','`
    fi

    echo "errorvols $count ${DETAIL}"

}
    
check_installed() {
    dpkg -s bacula-director-pgsql &>/dev/null
    RC=$?
    if [ $RC -eq 0 ] ; then
        INSTALLED=1
        PGSQL=1
    fi
}

check_installed

if [ $INSTALLED ] ; then

    if [ $PGSQL ] ; then
        CMD="/usr/bin/psql -1 -q -A -t bacula"
    fi

    echo "<<<bacula>>>"
    status_freshness
    status_fullbackups
    status_fullbackups_pool
    status_errounos_volumes
fi
